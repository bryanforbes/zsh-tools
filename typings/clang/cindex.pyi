import os
from _typeshed import SupportsRead
from collections.abc import Callable, Iterable, Iterator
from ctypes import *
from ctypes import _CArgObject, _Pointer
from enum import Enum
from typing import Any, Generic, LiteralString, Protocol, Self, TypeAlias, TypeVar

type StrPath = str | os.PathLike[str]
type LibFunc = (
    tuple[str, list[Any] | None]
    | tuple[str, list[Any] | None, Any]
    | tuple[str, list[Any] | None, Any, Callable[..., Any]]
)
TSeq = TypeVar('TSeq', covariant=True)

class NoSliceSequence(Protocol[TSeq]):
    def __len__(self) -> int: ...
    def __getitem__(self, key: int) -> TSeq: ...

class c_interop_string(c_char_p):
    def __init__(self, p: str | bytes | None = ...) -> None: ...
    @property
    def value(self) -> str | None: ...
    @classmethod
    def from_param(cls, param: str | bytes | None) -> c_interop_string: ...
    @staticmethod
    def to_python_string(x: c_interop_string) -> str | None: ...

def b(x: str | bytes) -> bytes: ...

type c_object_p = type[_Pointer[Any]]

class TranslationUnitLoadError(Exception): ...

class TranslationUnitSaveError(Exception):
    ERROR_UNKNOWN = ...
    ERROR_TRANSLATION_ERRORS = ...
    ERROR_INVALID_TU = ...
    def __init__(self, enumeration: int, message: str) -> None: ...

TInstance = TypeVar('TInstance')
TResult = TypeVar('TResult')

class CachedProperty(Generic[TInstance, TResult]):
    def __init__(self, wrapped: Callable[[TInstance], TResult]) -> None: ...
    def __get__(
        self, instance: TInstance | None, instance_type: type[TInstance] | None = ...
    ) -> TResult: ...

class _CXString(Structure):
    _fields_ = ...
    def __del__(self) -> None: ...
    @staticmethod
    def from_result(res: _CXString) -> str: ...

class SourceLocation(Structure):
    _fields_ = ...
    _data = ...
    @staticmethod
    def from_position(
        tu: TranslationUnit, file: File, line: int, column: int
    ) -> SourceLocation: ...
    @staticmethod
    def from_offset(tu: TranslationUnit, file: File, offset: int) -> SourceLocation: ...
    @property
    def file(self) -> File | None: ...
    @property
    def line(self) -> int: ...
    @property
    def column(self) -> int: ...
    @property
    def offset(self) -> int: ...
    @property
    def is_in_system_header(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: SourceLocation) -> bool: ...
    def __le__(self, other: SourceLocation) -> bool: ...

class SourceRange(Structure):
    _fields_ = ...
    @staticmethod
    def from_locations(start: SourceLocation, end: SourceLocation) -> SourceRange: ...
    @property
    def start(self) -> SourceLocation: ...
    @property
    def end(self) -> SourceLocation: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __contains__(self, other: SourceLocation) -> bool: ...

class Diagnostic:
    Ignored = ...
    Note = ...
    Warning = ...
    Error = ...
    Fatal = ...
    DisplaySourceLocation = ...
    DisplayColumn = ...
    DisplaySourceRanges = ...
    DisplayOption = ...
    DisplayCategoryId = ...
    DisplayCategoryName = ...
    _FormatOptionsMask = ...
    def __init__(self, ptr: _Pointer[Any]) -> None: ...
    def __del__(self) -> None: ...
    @property
    def severity(self) -> int: ...
    @property
    def location(self) -> SourceLocation: ...
    @property
    def spelling(self) -> str: ...
    @property
    def ranges(self) -> NoSliceSequence[SourceRange]: ...
    @property
    def fixits(self) -> NoSliceSequence[FixIt]: ...
    @property
    def children(self) -> NoSliceSequence[Diagnostic]: ...
    @property
    def category_number(self) -> int: ...
    @property
    def category_name(self) -> str: ...
    @property
    def option(self) -> str: ...
    @property
    def disable_option(self) -> str: ...
    def format(self, options: int = ...) -> str: ...
    def from_param(self) -> _Pointer[Any]: ...

class FixIt:
    def __init__(self, range: SourceRange, value: str) -> None: ...

class TokenGroup:
    def __init__(
        self, tu: TranslationUnit, memory: _Pointer[Any], count: int
    ) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def get_tokens(tu: TranslationUnit, extent: SourceRange) -> Iterator[Token]: ...

class BaseEnumeration(Enum):
    def from_param(self) -> _Pointer[Any]: ...
    @classmethod
    def from_id(cls, id: int) -> Self: ...

class TokenKind(BaseEnumeration):
    @classmethod
    def from_value(cls, value: int) -> Self: ...

    PUNCTUATION = ...
    KEYWORD = ...
    IDENTIFIER = ...
    LITERAL = ...
    COMMENT = ...

class CursorKind(BaseEnumeration):
    @staticmethod
    def get_all_kinds() -> list[CursorKind]: ...
    def is_declaration(self) -> bool: ...
    def is_reference(self) -> bool: ...
    def is_expression(self) -> bool: ...
    def is_statement(self) -> bool: ...
    def is_attribute(self) -> bool: ...
    def is_invalid(self) -> bool: ...
    def is_translation_unit(self) -> bool: ...
    def is_preprocessing(self) -> bool: ...
    def is_unexposed(self) -> bool: ...

    UNEXPOSED_DECL = ...
    STRUCT_DECL = ...
    UNION_DECL = ...
    CLASS_DECL = ...
    ENUM_DECL = ...
    FIELD_DECL = ...
    ENUM_CONSTANT_DECL = ...
    FUNCTION_DECL = ...
    VAR_DECL = ...
    PARM_DECL = ...
    OBJC_INTERFACE_DECL = ...
    OBJC_CATEGORY_DECL = ...
    OBJC_PROTOCOL_DECL = ...
    OBJC_PROPERTY_DECL = ...
    OBJC_IVAR_DECL = ...
    OBJC_INSTANCE_METHOD_DECL = ...
    OBJC_CLASS_METHOD_DECL = ...
    OBJC_IMPLEMENTATION_DECL = ...
    OBJC_CATEGORY_IMPL_DECL = ...
    TYPEDEF_DECL = ...
    CXX_METHOD = ...
    NAMESPACE = ...
    LINKAGE_SPEC = ...
    CONSTRUCTOR = ...
    DESTRUCTOR = ...
    CONVERSION_FUNCTION = ...
    TEMPLATE_TYPE_PARAMETER = ...
    TEMPLATE_NON_TYPE_PARAMETER = ...
    TEMPLATE_TEMPLATE_PARAMETER = ...
    FUNCTION_TEMPLATE = ...
    CLASS_TEMPLATE = ...
    CLASS_TEMPLATE_PARTIAL_SPECIALIZATION = ...
    NAMESPACE_ALIAS = ...
    USING_DIRECTIVE = ...
    USING_DECLARATION = ...
    TYPE_ALIAS_DECL = ...
    OBJC_SYNTHESIZE_DECL = ...
    OBJC_DYNAMIC_DECL = ...
    CXX_ACCESS_SPEC_DECL = ...
    OBJC_SUPER_CLASS_REF = ...
    OBJC_PROTOCOL_REF = ...
    OBJC_CLASS_REF = ...
    TYPE_REF = ...
    CXX_BASE_SPECIFIER = ...
    TEMPLATE_REF = ...
    NAMESPACE_REF = ...
    MEMBER_REF = ...
    LABEL_REF = ...
    OVERLOADED_DECL_REF = ...
    VARIABLE_REF = ...
    INVALID_FILE = ...
    NO_DECL_FOUND = ...
    NOT_IMPLEMENTED = ...
    INVALID_CODE = ...
    UNEXPOSED_EXPR = ...
    DECL_REF_EXPR = ...
    MEMBER_REF_EXPR = ...
    CALL_EXPR = ...
    OBJC_MESSAGE_EXPR = ...
    BLOCK_EXPR = ...
    INTEGER_LITERAL = ...
    FLOATING_LITERAL = ...
    IMAGINARY_LITERAL = ...
    STRING_LITERAL = ...
    CHARACTER_LITERAL = ...
    PAREN_EXPR = ...
    UNARY_OPERATOR = ...
    ARRAY_SUBSCRIPT_EXPR = ...
    BINARY_OPERATOR = ...
    COMPOUND_ASSIGNMENT_OPERATOR = ...
    CONDITIONAL_OPERATOR = ...
    CSTYLE_CAST_EXPR = ...
    COMPOUND_LITERAL_EXPR = ...
    INIT_LIST_EXPR = ...
    ADDR_LABEL_EXPR = ...
    StmtExpr = ...
    GENERIC_SELECTION_EXPR = ...
    GNU_NULL_EXPR = ...
    CXX_STATIC_CAST_EXPR = ...
    CXX_DYNAMIC_CAST_EXPR = ...
    CXX_REINTERPRET_CAST_EXPR = ...
    CXX_CONST_CAST_EXPR = ...
    CXX_FUNCTIONAL_CAST_EXPR = ...
    CXX_TYPEID_EXPR = ...
    CXX_BOOL_LITERAL_EXPR = ...
    CXX_NULL_PTR_LITERAL_EXPR = ...
    CXX_THIS_EXPR = ...
    CXX_THROW_EXPR = ...
    CXX_NEW_EXPR = ...
    CXX_DELETE_EXPR = ...
    CXX_UNARY_EXPR = ...
    OBJC_STRING_LITERAL = ...
    OBJC_ENCODE_EXPR = ...
    OBJC_SELECTOR_EXPR = ...
    OBJC_PROTOCOL_EXPR = ...
    OBJC_BRIDGE_CAST_EXPR = ...
    PACK_EXPANSION_EXPR = ...
    SIZE_OF_PACK_EXPR = ...
    LAMBDA_EXPR = ...
    OBJ_BOOL_LITERAL_EXPR = ...
    OBJ_SELF_EXPR = ...
    OMP_ARRAY_SECTION_EXPR = ...
    OBJC_AVAILABILITY_CHECK_EXPR = ...
    FIXED_POINT_LITERAL = ...
    OMP_ARRAY_SHAPING_EXPR = ...
    OMP_ITERATOR_EXPR = ...
    CXX_ADDRSPACE_CAST_EXPR = ...
    CONCEPT_SPECIALIZATION_EXPR = ...
    REQUIRES_EXPR = ...
    CXX_PAREN_LIST_INIT_EXPR = ...
    PACK_INDEXING_EXPR = ...
    UNEXPOSED_STMT = ...
    LABEL_STMT = ...
    COMPOUND_STMT = ...
    CASE_STMT = ...
    DEFAULT_STMT = ...
    IF_STMT = ...
    SWITCH_STMT = ...
    WHILE_STMT = ...
    DO_STMT = ...
    FOR_STMT = ...
    GOTO_STMT = ...
    INDIRECT_GOTO_STMT = ...
    CONTINUE_STMT = ...
    BREAK_STMT = ...
    RETURN_STMT = ...
    ASM_STMT = ...
    OBJC_AT_TRY_STMT = ...
    OBJC_AT_CATCH_STMT = ...
    OBJC_AT_FINALLY_STMT = ...
    OBJC_AT_THROW_STMT = ...
    OBJC_AT_SYNCHRONIZED_STMT = ...
    OBJC_AUTORELEASE_POOL_STMT = ...
    OBJC_FOR_COLLECTION_STMT = ...
    CXX_CATCH_STMT = ...
    CXX_TRY_STMT = ...
    CXX_FOR_RANGE_STMT = ...
    SEH_TRY_STMT = ...
    SEH_EXCEPT_STMT = ...
    SEH_FINALLY_STMT = ...
    MS_ASM_STMT = ...
    NULL_STMT = ...
    DECL_STMT = ...
    OMP_PARALLEL_DIRECTIVE = ...
    OMP_SIMD_DIRECTIVE = ...
    OMP_FOR_DIRECTIVE = ...
    OMP_SECTIONS_DIRECTIVE = ...
    OMP_SECTION_DIRECTIVE = ...
    OMP_SINGLE_DIRECTIVE = ...
    OMP_PARALLEL_FOR_DIRECTIVE = ...
    OMP_PARALLEL_SECTIONS_DIRECTIVE = ...
    OMP_TASK_DIRECTIVE = ...
    OMP_MASTER_DIRECTIVE = ...
    OMP_CRITICAL_DIRECTIVE = ...
    OMP_TASKYIELD_DIRECTIVE = ...
    OMP_BARRIER_DIRECTIVE = ...
    OMP_TASKWAIT_DIRECTIVE = ...
    OMP_FLUSH_DIRECTIVE = ...
    SEH_LEAVE_STMT = ...
    OMP_ORDERED_DIRECTIVE = ...
    OMP_ATOMIC_DIRECTIVE = ...
    OMP_FOR_SIMD_DIRECTIVE = ...
    OMP_PARALLELFORSIMD_DIRECTIVE = ...
    OMP_TARGET_DIRECTIVE = ...
    OMP_TEAMS_DIRECTIVE = ...
    OMP_TASKGROUP_DIRECTIVE = ...
    OMP_CANCELLATION_POINT_DIRECTIVE = ...
    OMP_CANCEL_DIRECTIVE = ...
    OMP_TARGET_DATA_DIRECTIVE = ...
    OMP_TASK_LOOP_DIRECTIVE = ...
    OMP_TASK_LOOP_SIMD_DIRECTIVE = ...
    OMP_DISTRIBUTE_DIRECTIVE = ...
    OMP_TARGET_ENTER_DATA_DIRECTIVE = ...
    OMP_TARGET_EXIT_DATA_DIRECTIVE = ...
    OMP_TARGET_PARALLEL_DIRECTIVE = ...
    OMP_TARGET_PARALLELFOR_DIRECTIVE = ...
    OMP_TARGET_UPDATE_DIRECTIVE = ...
    OMP_DISTRIBUTE_PARALLELFOR_DIRECTIVE = ...
    OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = ...
    OMP_DISTRIBUTE_SIMD_DIRECTIVE = ...
    OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE = ...
    OMP_TARGET_SIMD_DIRECTIVE = ...
    OMP_TEAMS_DISTRIBUTE_DIRECTIVE = ...
    OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE = ...
    OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = ...
    OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE = ...
    OMP_TARGET_TEAMS_DIRECTIVE = ...
    OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE = ...
    OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE = ...
    OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = ...
    OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE = ...
    BUILTIN_BIT_CAST_EXPR = ...
    OMP_MASTER_TASK_LOOP_DIRECTIVE = ...
    OMP_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE = ...
    OMP_MASTER_TASK_LOOP_SIMD_DIRECTIVE = ...
    OMP_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE = ...
    OMP_PARALLEL_MASTER_DIRECTIVE = ...
    OMP_DEPOBJ_DIRECTIVE = ...
    OMP_SCAN_DIRECTIVE = ...
    OMP_TILE_DIRECTIVE = ...
    OMP_CANONICAL_LOOP = ...
    OMP_INTEROP_DIRECTIVE = ...
    OMP_DISPATCH_DIRECTIVE = ...
    OMP_MASKED_DIRECTIVE = ...
    OMP_UNROLL_DIRECTIVE = ...
    OMP_META_DIRECTIVE = ...
    OMP_GENERIC_LOOP_DIRECTIVE = ...
    OMP_TEAMS_GENERIC_LOOP_DIRECTIVE = ...
    OMP_TARGET_TEAMS_GENERIC_LOOP_DIRECTIVE = ...
    OMP_PARALLEL_GENERIC_LOOP_DIRECTIVE = ...
    OMP_TARGET_PARALLEL_GENERIC_LOOP_DIRECTIVE = ...
    OMP_PARALLEL_MASKED_DIRECTIVE = ...
    OMP_MASKED_TASK_LOOP_DIRECTIVE = ...
    OMP_MASKED_TASK_LOOP_SIMD_DIRECTIVE = ...
    OMP_PARALLEL_MASKED_TASK_LOOP_DIRECTIVE = ...
    OMP_PARALLEL_MASKED_TASK_LOOP_SIMD_DIRECTIVE = ...
    OMP_ERROR_DIRECTIVE = ...
    OMP_SCOPE_DIRECTIVE = ...
    OPEN_ACC_COMPUTE_DIRECTIVE = ...
    TRANSLATION_UNIT = ...
    UNEXPOSED_ATTR = ...
    IB_ACTION_ATTR = ...
    IB_OUTLET_ATTR = ...
    IB_OUTLET_COLLECTION_ATTR = ...
    CXX_FINAL_ATTR = ...
    CXX_OVERRIDE_ATTR = ...
    ANNOTATE_ATTR = ...
    ASM_LABEL_ATTR = ...
    PACKED_ATTR = ...
    PURE_ATTR = ...
    CONST_ATTR = ...
    NODUPLICATE_ATTR = ...
    CUDACONSTANT_ATTR = ...
    CUDADEVICE_ATTR = ...
    CUDAGLOBAL_ATTR = ...
    CUDAHOST_ATTR = ...
    CUDASHARED_ATTR = ...
    VISIBILITY_ATTR = ...
    DLLEXPORT_ATTR = ...
    DLLIMPORT_ATTR = ...
    NS_RETURNS_RETAINED = ...
    NS_RETURNS_NOT_RETAINED = ...
    NS_RETURNS_AUTORELEASED = ...
    NS_CONSUMES_SELF = ...
    NS_CONSUMED = ...
    OBJC_EXCEPTION = ...
    OBJC_NSOBJECT = ...
    OBJC_INDEPENDENT_CLASS = ...
    OBJC_PRECISE_LIFETIME = ...
    OBJC_RETURNS_INNER_POINTER = ...
    OBJC_REQUIRES_SUPER = ...
    OBJC_ROOT_CLASS = ...
    OBJC_SUBCLASSING_RESTRICTED = ...
    OBJC_EXPLICIT_PROTOCOL_IMPL = ...
    OBJC_DESIGNATED_INITIALIZER = ...
    OBJC_RUNTIME_VISIBLE = ...
    OBJC_BOXABLE = ...
    FLAG_ENUM = ...
    CONVERGENT_ATTR = ...
    WARN_UNUSED_ATTR = ...
    WARN_UNUSED_RESULT_ATTR = ...
    ALIGNED_ATTR = ...
    PREPROCESSING_DIRECTIVE = ...
    MACRO_DEFINITION = ...
    MACRO_INSTANTIATION = ...
    INCLUSION_DIRECTIVE = ...
    MODULE_IMPORT_DECL = ...
    TYPE_ALIAS_TEMPLATE_DECL = ...
    STATIC_ASSERT = ...
    FRIEND_DECL = ...
    CONCEPT_DECL = ...
    OVERLOAD_CANDIDATE = ...

class TemplateArgumentKind(BaseEnumeration):
    NULL = ...
    TYPE = ...
    DECLARATION = ...
    NULLPTR = ...
    INTEGRAL = ...
    TEMPLATE = ...
    TEMPLATE_EXPANSION = ...
    EXPRESSION = ...
    PACK = ...
    INVALID = ...

class ExceptionSpecificationKind(BaseEnumeration):
    NONE = ...
    DYNAMIC_NONE = ...
    DYNAMIC = ...
    MS_ANY = ...
    BASIC_NOEXCEPT = ...
    COMPUTED_NOEXCEPT = ...
    UNEVALUATED = ...
    UNINSTANTIATED = ...
    UNPARSED = ...

class Cursor(Structure):
    _fields_ = ...
    @staticmethod
    def from_location(
        tu: TranslationUnit, location: SourceLocation
    ) -> Cursor | None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def is_definition(self) -> bool: ...
    def is_const_method(self) -> bool: ...
    def is_converting_constructor(self) -> bool: ...
    def is_copy_constructor(self) -> bool: ...
    def is_default_constructor(self) -> bool: ...
    def is_move_constructor(self) -> bool: ...
    def is_default_method(self) -> bool: ...
    def is_deleted_method(self) -> bool: ...
    def is_copy_assignment_operator_method(self) -> bool: ...
    def is_move_assignment_operator_method(self) -> bool: ...
    def is_explicit_method(self) -> bool: ...
    def is_mutable_field(self) -> bool: ...
    def is_pure_virtual_method(self) -> bool: ...
    def is_static_method(self) -> bool: ...
    def is_virtual_method(self) -> bool: ...
    def is_abstract_record(self) -> bool: ...
    def is_scoped_enum(self) -> bool: ...
    def get_definition(self) -> Cursor | None: ...
    def get_usr(self) -> str: ...
    def get_included_file(self) -> File | None: ...
    @property
    def kind(self) -> CursorKind: ...
    @property
    def spelling(self) -> str: ...
    def pretty_printed(self, policy: PrintingPolicy) -> str: ...
    @property
    def displayname(self) -> str: ...
    @property
    def mangled_name(self) -> str: ...
    @property
    def location(self) -> SourceLocation: ...
    @property
    def linkage(self) -> LinkageKind: ...
    @property
    def tls_kind(self) -> TLSKind: ...
    @property
    def extent(self) -> SourceRange: ...
    @property
    def storage_class(self) -> StorageClass: ...
    @property
    def availability(self) -> AvailabilityKind: ...
    @property
    def binary_operator(self) -> BinaryOperator: ...
    @property
    def access_specifier(self) -> AccessSpecifier: ...
    @property
    def type(self) -> Type: ...
    @property
    def canonical(self) -> Cursor | None: ...
    @property
    def result_type(self) -> Type: ...
    @property
    def exception_specification_kind(self) -> ExceptionSpecificationKind: ...
    @property
    def underlying_typedef_type(self) -> Type: ...
    @property
    def enum_type(self) -> Type: ...
    @property
    def enum_value(self) -> int | None: ...
    @property
    def objc_type_encoding(self) -> str: ...
    @property
    def hash(self) -> int: ...
    @property
    def semantic_parent(self) -> Cursor | None: ...
    @property
    def lexical_parent(self) -> Cursor | None: ...
    @property
    def translation_unit(self) -> TranslationUnit: ...
    @property
    def referenced(self) -> Cursor | None: ...
    @property
    def brief_comment(self) -> str: ...
    @property
    def raw_comment(self) -> str: ...
    def get_arguments(self) -> Iterator[Cursor | None]: ...
    def get_num_template_arguments(self) -> int: ...
    def get_template_argument_kind(self, num: int) -> TemplateArgumentKind: ...
    def get_template_argument_type(self, num: int) -> Type: ...
    def get_template_argument_value(self, num: int) -> int | Type | None: ...
    def get_template_argument_unsigned_value(self, num: int) -> int: ...
    def get_children(self) -> Iterator[Cursor]: ...
    def walk_preorder(self) -> Iterator[Cursor]: ...
    def get_tokens(self) -> Iterator[Token]: ...
    def get_field_offsetof(self) -> int: ...
    def get_base_offsetof(self, parent: Cursor) -> int: ...
    def is_virtual_base(self) -> bool: ...
    def is_anonymous(self) -> bool: ...
    def is_anonymous_record_decl(self) -> bool: ...
    def is_bitfield(self) -> bool: ...
    def get_bitfield_width(self) -> int: ...
    @staticmethod
    def from_result(res: Cursor, arg: Cursor) -> Cursor | None: ...
    @staticmethod
    def from_cursor_result(res: Cursor, arg: Cursor) -> Cursor | None: ...

class BinaryOperator(BaseEnumeration):
    def __nonzero__(self) -> bool: ...
    @property
    def is_assignment(self) -> bool: ...

    Invalid = ...
    PtrMemD = ...
    PtrMemI = ...
    Mul = ...
    Div = ...
    Rem = ...
    Add = ...
    Sub = ...
    Shl = ...
    Shr = ...
    Cmp = ...
    LT = ...
    GT = ...
    LE = ...
    GE = ...
    EQ = ...
    NE = ...
    And = ...
    Xor = ...
    Or = ...
    LAnd = ...
    LOr = ...
    Assign = ...
    MulAssign = ...
    DivAssign = ...
    RemAssign = ...
    AddAssign = ...
    SubAssign = ...
    ShlAssign = ...
    ShrAssign = ...
    AndAssign = ...
    XorAssign = ...
    OrAssign = ...
    Comma = ...

class StorageClass(BaseEnumeration):
    INVALID = ...
    NONE = ...
    EXTERN = ...
    STATIC = ...
    PRIVATEEXTERN = ...
    OPENCLWORKGROUPLOCAL = ...
    AUTO = ...
    REGISTER = ...

class AvailabilityKind(BaseEnumeration):
    AVAILABLE = ...
    DEPRECATED = ...
    NOT_AVAILABLE = ...
    NOT_ACCESSIBLE = ...

class AccessSpecifier(BaseEnumeration):
    INVALID = ...
    PUBLIC = ...
    PROTECTED = ...
    PRIVATE = ...
    NONE = ...

class TypeKind(BaseEnumeration):
    @property
    def spelling(self) -> str: ...

    INVALID = ...
    UNEXPOSED = ...
    VOID = ...
    BOOL = ...
    CHAR_U = ...
    UCHAR = ...
    CHAR16 = ...
    CHAR32 = ...
    USHORT = ...
    UINT = ...
    ULONG = ...
    ULONGLONG = ...
    UINT128 = ...
    CHAR_S = ...
    SCHAR = ...
    WCHAR = ...
    SHORT = ...
    INT = ...
    LONG = ...
    LONGLONG = ...
    INT128 = ...
    FLOAT = ...
    DOUBLE = ...
    LONGDOUBLE = ...
    NULLPTR = ...
    OVERLOAD = ...
    DEPENDENT = ...
    OBJCID = ...
    OBJCCLASS = ...
    OBJCSEL = ...
    FLOAT128 = ...
    HALF = ...
    IBM128 = ...
    COMPLEX = ...
    POINTER = ...
    BLOCKPOINTER = ...
    LVALUEREFERENCE = ...
    RVALUEREFERENCE = ...
    RECORD = ...
    ENUM = ...
    TYPEDEF = ...
    OBJCINTERFACE = ...
    OBJCOBJECTPOINTER = ...
    FUNCTIONNOPROTO = ...
    FUNCTIONPROTO = ...
    CONSTANTARRAY = ...
    VECTOR = ...
    INCOMPLETEARRAY = ...
    VARIABLEARRAY = ...
    DEPENDENTSIZEDARRAY = ...
    MEMBERPOINTER = ...
    AUTO = ...
    ELABORATED = ...
    PIPE = ...
    OCLIMAGE1DRO = ...
    OCLIMAGE1DARRAYRO = ...
    OCLIMAGE1DBUFFERRO = ...
    OCLIMAGE2DRO = ...
    OCLIMAGE2DARRAYRO = ...
    OCLIMAGE2DDEPTHRO = ...
    OCLIMAGE2DARRAYDEPTHRO = ...
    OCLIMAGE2DMSAARO = ...
    OCLIMAGE2DARRAYMSAARO = ...
    OCLIMAGE2DMSAADEPTHRO = ...
    OCLIMAGE2DARRAYMSAADEPTHRO = ...
    OCLIMAGE3DRO = ...
    OCLIMAGE1DWO = ...
    OCLIMAGE1DARRAYWO = ...
    OCLIMAGE1DBUFFERWO = ...
    OCLIMAGE2DWO = ...
    OCLIMAGE2DARRAYWO = ...
    OCLIMAGE2DDEPTHWO = ...
    OCLIMAGE2DARRAYDEPTHWO = ...
    OCLIMAGE2DMSAAWO = ...
    OCLIMAGE2DARRAYMSAAWO = ...
    OCLIMAGE2DMSAADEPTHWO = ...
    OCLIMAGE2DARRAYMSAADEPTHWO = ...
    OCLIMAGE3DWO = ...
    OCLIMAGE1DRW = ...
    OCLIMAGE1DARRAYRW = ...
    OCLIMAGE1DBUFFERRW = ...
    OCLIMAGE2DRW = ...
    OCLIMAGE2DARRAYRW = ...
    OCLIMAGE2DDEPTHRW = ...
    OCLIMAGE2DARRAYDEPTHRW = ...
    OCLIMAGE2DMSAARW = ...
    OCLIMAGE2DARRAYMSAARW = ...
    OCLIMAGE2DMSAADEPTHRW = ...
    OCLIMAGE2DARRAYMSAADEPTHRW = ...
    OCLIMAGE3DRW = ...
    OCLSAMPLER = ...
    OCLEVENT = ...
    OCLQUEUE = ...
    OCLRESERVEID = ...
    OBJCOBJECT = ...
    OBJCTYPEPARAM = ...
    ATTRIBUTED = ...
    OCLINTELSUBGROUPAVCMCEPAYLOAD = ...
    OCLINTELSUBGROUPAVCIMEPAYLOAD = ...
    OCLINTELSUBGROUPAVCREFPAYLOAD = ...
    OCLINTELSUBGROUPAVCSICPAYLOAD = ...
    OCLINTELSUBGROUPAVCMCERESULT = ...
    OCLINTELSUBGROUPAVCIMERESULT = ...
    OCLINTELSUBGROUPAVCREFRESULT = ...
    OCLINTELSUBGROUPAVCSICRESULT = ...
    OCLINTELSUBGROUPAVCIMERESULTSINGLEREFERENCESTREAMOUT = ...
    OCLINTELSUBGROUPAVCIMERESULTSDUALREFERENCESTREAMOUT = ...
    OCLINTELSUBGROUPAVCIMERESULTSSINGLEREFERENCESTREAMIN = ...
    OCLINTELSUBGROUPAVCIMEDUALREFERENCESTREAMIN = ...
    EXTVECTOR = ...
    ATOMIC = ...
    BTFTAGATTRIBUTED = ...

class RefQualifierKind(BaseEnumeration):
    NONE = ...
    LVALUE = ...
    RVALUE = ...

class LinkageKind(BaseEnumeration):
    INVALID = ...
    NO_LINKAGE = ...
    INTERNAL = ...
    UNIQUE_EXTERNAL = ...
    EXTERNAL = ...

class TLSKind(BaseEnumeration):
    NONE = ...
    DYNAMIC = ...
    STATIC = ...

class Type(Structure):
    _fields_ = ...
    @property
    def kind(self) -> TypeKind: ...
    def argument_types(self) -> NoSliceSequence[Type]: ...
    @property
    def element_type(self) -> Type: ...
    @property
    def element_count(self) -> int: ...
    @property
    def translation_unit(self) -> TranslationUnit: ...
    @staticmethod
    def from_result(res: _Pointer[Any], args: _Pointer[Any]) -> Type: ...
    def get_num_template_arguments(self) -> int: ...
    def get_template_argument_type(self, num: int) -> Type: ...
    def get_canonical(self) -> Type: ...
    def is_const_qualified(self) -> bool: ...
    def is_volatile_qualified(self) -> bool: ...
    def is_restrict_qualified(self) -> bool: ...
    def is_function_variadic(self) -> bool: ...
    def get_address_space(self) -> int: ...
    def get_typedef_name(self) -> str: ...
    def is_pod(self) -> bool: ...
    def get_pointee(self) -> Type: ...
    def get_declaration(self) -> Cursor | None: ...
    def get_result(self) -> Type: ...
    def get_array_element_type(self) -> Type: ...
    def get_array_size(self) -> int: ...
    def get_class_type(self) -> Type: ...
    def get_named_type(self) -> Type: ...
    def get_align(self) -> int: ...
    def get_size(self) -> int: ...
    def get_offset(self, fieldname: str) -> int: ...
    def get_ref_qualifier(self) -> RefQualifierKind: ...
    def get_fields(self) -> Iterator[Cursor]: ...
    def get_bases(self) -> Iterator[Cursor]: ...
    def get_exception_specification_kind(self) -> ExceptionSpecificationKind: ...
    @property
    def spelling(self) -> str: ...
    def pretty_printed(self, policy: PrintingPolicy) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ClangObject:
    def __init__(self, obj: _Pointer[Any]) -> None: ...
    def from_param(self) -> _Pointer[Any]: ...

class _CXUnsavedFile(Structure):
    _fields_ = ...

SpellingCache: dict[int, str] | None = ...

class CompletionChunk:
    class Kind:
        def __init__(self, name: str) -> None: ...

    def __init__(self, completionString: CompletionString, key: int) -> None: ...
    @CachedProperty
    def spelling(self) -> str: ...
    @CachedProperty
    def kind(self) -> Kind: ...
    @CachedProperty
    def string(self) -> CompletionString | None: ...
    def isKindOptional(self) -> bool: ...
    def isKindTypedText(self) -> bool: ...
    def isKindPlaceHolder(self) -> bool: ...
    def isKindInformative(self) -> bool: ...
    def isKindResultType(self) -> bool: ...

completionChunkKindMap: dict[int, int] | None = ...

class CompletionString(ClangObject):
    class Availability:
        def __init__(self, name: str) -> None: ...

    def __len__(self) -> int: ...
    @CachedProperty
    def num_chunks(self) -> int: ...
    def __getitem__(self, key: int) -> CompletionChunk: ...
    @property
    def priority(self) -> int: ...
    @property
    def availability(self) -> int: ...
    @property
    def briefComment(self) -> str | _CXString: ...

availabilityKinds: dict[int, str] | None = ...

class CodeCompletionResult(Structure):
    _fields_ = ...
    @property
    def kind(self) -> CursorKind: ...
    @property
    def string(self) -> CompletionString: ...

class CCRStructure(Structure):
    _fields_ = ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: int) -> Any: ...

class CodeCompletionResults(ClangObject):
    def __init__(self, ptr: _Pointer[Any]) -> None: ...
    def from_param(self) -> _Pointer[Any]: ...
    def __del__(self) -> None: ...
    @property
    def results(self) -> NoSliceSequence[CodeCompletionResult]: ...
    @property
    def diagnostics(self) -> NoSliceSequence[Diagnostic]: ...

class Index(ClangObject):
    @staticmethod
    def create(excludeDecls: bool = False) -> Index: ...
    def __del__(self) -> None: ...
    def read(self, path: StrPath) -> TranslationUnit | None: ...
    def parse(
        self,
        path: StrPath,
        args: list[str] | None = None,
        unsaved_files: Iterable[
            tuple[StrPath, str | SupportsRead[str] | SupportsRead[bytes]]
        ]
        | None = None,
        options: int = 0,
    ) -> TranslationUnit | None: ...

class TranslationUnit(ClangObject):
    PARSE_NONE = ...
    PARSE_DETAILED_PROCESSING_RECORD = ...
    PARSE_INCOMPLETE = ...
    PARSE_PRECOMPILED_PREAMBLE = ...
    PARSE_CACHE_COMPLETION_RESULTS = ...
    PARSE_SKIP_FUNCTION_BODIES = ...
    PARSE_INCLUDE_BRIEF_COMMENTS_IN_CODE_COMPLETION = ...
    @staticmethod
    def process_unsaved_files(
        unsaved_files: Iterable[
            tuple[StrPath, str | SupportsRead[str] | SupportsRead[bytes]]
        ]
        | None,
    ) -> Array[_CXUnsavedFile] | None: ...
    @classmethod
    def from_source(
        cls,
        filename: StrPath,
        args: list[str] | None = None,
        unsaved_files: Iterable[
            tuple[StrPath, str | SupportsRead[str] | SupportsRead[bytes]]
        ]
        | None = None,
        options: int = 0,
        index: Index | None = None,
    ) -> Self: ...
    @classmethod
    def from_ast_file(cls, filename: StrPath, index: Index | None = None) -> Self: ...
    def __init__(self, ptr: _Pointer[Any], index: Index | None) -> None: ...
    def __del__(self) -> None: ...
    @property
    def cursor(self) -> Cursor | None: ...
    @property
    def spelling(self) -> str: ...
    def get_includes(self) -> Iterator[FileInclusion]: ...
    def get_file(self, filename: StrPath) -> File | None: ...
    def get_location(
        self, filename: StrPath, position: int | tuple[int, int]
    ) -> SourceLocation: ...
    def get_extent(
        self,
        filename: StrPath,
        locations: tuple[SourceLocation, SourceLocation]
        | tuple[int, int]
        | tuple[tuple[int, int], tuple[int, int]]
        | list[SourceLocation]
        | list[int]
        | list[tuple[int, int]],
    ) -> SourceRange: ...
    @property
    def diagnostics(self) -> NoSliceSequence[Diagnostic]: ...
    def reparse(
        self,
        unsaved_files: Iterable[
            tuple[StrPath, str | SupportsRead[str] | SupportsRead[bytes]]
        ]
        | None = None,
        options: int = 0,
    ) -> None: ...
    def save(self, filename: StrPath) -> None: ...
    def codeComplete(
        self,
        path: StrPath,
        line: int,
        column: int,
        unsaved_files: Iterable[
            tuple[StrPath, str | SupportsRead[str] | SupportsRead[bytes]]
        ]
        | None = None,
        include_macros: bool = False,
        include_code_patterns: bool = False,
        include_brief_comments: bool = False,
    ) -> CodeCompletionResults | None: ...
    def get_tokens(
        self,
        locations: tuple[SourceLocation, SourceLocation] | SourceRange | None = None,
        extent: SourceRange | None = None,
    ) -> Iterator[Token]: ...

class File(ClangObject):
    @staticmethod
    def from_name(
        translation_unit: TranslationUnit, file_name: StrPath
    ) -> File | None: ...
    @property
    def name(self) -> str: ...
    @property
    def time(self) -> int: ...
    @staticmethod
    def from_result(res: _Pointer[Any], arg: _Pointer[Any]) -> File: ...

class FileInclusion:
    def __init__(
        self, src: File, tgt: File, loc: SourceLocation, depth: int
    ) -> None: ...
    @property
    def is_input_file(self) -> bool: ...

class CompilationDatabaseError(Exception):
    ERROR_UNKNOWN = ...
    ERROR_CANNOTLOADDATABASE = ...
    def __init__(self, enumeration: int, message: str) -> None: ...

class CompileCommand:
    def __init__(self, cmd: str, ccmds: list[str] | Iterable[str]) -> None: ...
    @property
    def directory(self) -> str: ...
    @property
    def filename(self) -> str: ...
    @property
    def arguments(self) -> Iterator[str]: ...

class CompileCommands:
    def __init__(
        self, ccmds: list[CompileCommand] | Iterable[CompileCommand]
    ) -> None: ...
    def __del__(self) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, i: int) -> CompileCommand: ...
    @staticmethod
    def from_result(res: _Pointer[Any]) -> CompileCommands | None: ...

class CompilationDatabase(ClangObject):
    def __del__(self) -> None: ...
    @staticmethod
    def from_result(res: _Pointer[Any]) -> CompilationDatabase: ...
    @staticmethod
    def fromDirectory(buildDir: StrPath) -> CompilationDatabase: ...
    def getCompileCommands(self, filename: StrPath) -> CompileCommands | None: ...
    def getAllCompileCommands(self) -> CompileCommands | None: ...

class Token(Structure):
    _fields_ = ...
    @property
    def spelling(self) -> str: ...
    @property
    def kind(self) -> TokenKind: ...
    @property
    def location(self) -> SourceLocation: ...
    @property
    def extent(self) -> SourceRange: ...
    @property
    def cursor(self) -> Cursor | None: ...

class Rewriter(ClangObject):
    @staticmethod
    def create(tu: TranslationUnit) -> Rewriter: ...
    def __init__(self, ptr: _Pointer[Any]) -> None: ...
    def __del__(self) -> None: ...
    def insert_text_before(self, loc: SourceLocation, insert: str) -> None: ...
    def replace_text(self, extent: SourceRange, replacement: str) -> None: ...
    def remove_text(self, extent: SourceRange) -> None: ...
    def overwrite_changed_files(self) -> int: ...
    def write_main_file_to_stdout(self) -> None: ...

class PrintingPolicyProperty(BaseEnumeration):
    Indentation = ...
    SuppressSpecifiers = ...
    SuppressTagKeyword = ...
    IncludeTagDefinition = ...
    SuppressScope = ...
    SuppressUnwrittenScope = ...
    SuppressInitializers = ...
    ConstantArraySizeAsWritten = ...
    AnonymousTagLocations = ...
    SuppressStrongLifetime = ...
    SuppressLifetimeQualifiers = ...
    SuppressTemplateArgsInCXXConstructors = ...
    Bool = ...
    Restrict = ...
    Alignof = ...
    UnderscoreAlignof = ...
    UseVoidForZeroParams = ...
    TerseOutput = ...
    PolishForDeclaration = ...
    Half = ...
    MSWChar = ...
    IncludeNewlines = ...
    MSVCFormatting = ...
    ConstantsAsWritten = ...
    SuppressImplicitBase = ...
    FullyQualifiedName = ...

class PrintingPolicy(ClangObject):
    @staticmethod
    def create(cursor: Cursor) -> PrintingPolicy: ...
    def __init__(self, ptr: _Pointer[Any]) -> None: ...
    def __del__(self) -> None: ...
    def get_property(self, property: PrintingPolicyProperty) -> int: ...
    def set_property(self, property: PrintingPolicyProperty, value: int) -> None: ...

translation_unit_includes_callback: Callable[..., Any] = ...
cursor_visit_callback: Callable[..., Any] = ...
fields_visit_callback: Callable[..., Any] = ...
functionList: list[LibFunc] = ...

class LibclangError(Exception):
    def __init__(self, message: str) -> None: ...

def register_function(lib: type[CDLL], item: LibFunc, ignore_errors: bool) -> None: ...
def register_functions(lib: type[CDLL], ignore_errors: bool) -> None: ...

class Config:
    library_path = ...
    library_file: str | None = ...
    compatibility_check = ...
    loaded = ...
    @staticmethod
    def set_library_path(path: StrPath) -> None: ...
    @staticmethod
    def set_library_file(filename: StrPath) -> None: ...
    @staticmethod
    def set_compatibility_check(check_status: bool) -> None: ...
    @CachedProperty
    def lib(self) -> type[CDLL]: ...
    def get_filename(self) -> str: ...
    def get_cindex_library(self) -> type[CDLL]: ...
    def function_exists(self, name: str) -> bool: ...

conf: Config | None = ...
__all__ = [
    'AccessSpecifier',
    'AvailabilityKind',
    'BinaryOperator',
    'CodeCompletionResults',
    'CompilationDatabase',
    'CompileCommand',
    'CompileCommands',
    'Config',
    'Cursor',
    'CursorKind',
    'Diagnostic',
    'ExceptionSpecificationKind',
    'File',
    'FixIt',
    'Index',
    'LinkageKind',
    'PrintingPolicy',
    'PrintingPolicyProperty',
    'RefQualifierKind',
    'SourceLocation',
    'SourceRange',
    'StorageClass',
    'TLSKind',
    'TemplateArgumentKind',
    'Token',
    'TokenKind',
    'TranslationUnit',
    'TranslationUnitLoadError',
    'Type',
    'TypeKind',
]
